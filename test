-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Variables
local TargetPlayer = nil
local IsTargeting = false
local isTriggerToggled = false
local lastClickTime = 0

-- Function to find closest player from the mouse
local function FindClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local position, onScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
            local distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(position.X, position.Y)).Magnitude

            if distance < shared.Forbidden.PointAssist.Reach and distance < closestDistance and onScreen then
                closestDistance = distance
                closestPlayer = player
            end
        end
    end

    return closestPlayer
end

-- Camera locking logic
local function LockCamera()
    RunService.RenderStepped:Connect(function()
        if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local bodyPart = TargetPlayer.Character.HumanoidRootPart
            local predictedPosition = bodyPart.Position + (bodyPart.Velocity * Vector3.new(
                shared.Forbidden.PointAssist.VelocityCompensation.X,
                shared.Forbidden.PointAssist.VelocityCompensation.Y,
                shared.Forbidden.PointAssist.VelocityCompensation.Z
            ))
            local desiredCFrame = CFrame.new(Camera.CFrame.Position, predictedPosition)
            Camera.CFrame = Camera.CFrame:Lerp(desiredCFrame, shared.Forbidden.PointAssist.Stabilization)
        else
            TargetPlayer = nil
            IsTargeting = false
        end
    end)
end

-- Function to handle shooting
local function ShootAtTarget()
    if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = TargetPlayer.Character.HumanoidRootPart
        local predictedPosition = humanoidRootPart.Position + (humanoidRootPart.Velocity * 0.2)
        local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPosition)

        if onScreen then
            VirtualInputManager:SendMouseMoveEvent(screenPos.X, screenPos.Y, game)

            if os.clock() - lastClickTime >= shared.Nocturne.TriggerBot.CooldownTime then
                lastClickTime = os.clock()

                local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                if tool and tool:IsA("Tool") then
                    local shootFunction = tool:FindFirstChild("Fire")
                    if shootFunction and shootFunction:IsA("RemoteEvent") then
                        shootFunction:FireServer(TargetPlayer.Character)
                    else
                        VirtualInputManager:SendMouseButtonEvent(screenPos.X, screenPos.Y, 0, true, game, false)
                        VirtualInputManager:SendMouseButtonEvent(screenPos.X, screenPos.Y, 0, false, game, false)
                    end
                else
                    VirtualInputManager:SendMouseButtonEvent(screenPos.X, screenPos.Y, 0, true, game, false)
                    VirtualInputManager:SendMouseButtonEvent(screenPos.X, screenPos.Y, 0, false, game, false)
                end
            end
        end
    end
end

-- Key handling
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if isProcessed then return end

    local key = input.KeyCode
    if key == Enum.KeyCode[shared.Forbidden.ActivationKey:upper()] then
        if IsTargeting then
            IsTargeting = false
            TargetPlayer = nil
        else
            TargetPlayer = FindClosestPlayer()
            if TargetPlayer then
                IsTargeting = true
                LockCamera()
            end
        end
    elseif key == Enum.KeyCode[shared.Forbidden.DisableKey:upper()] then
        IsTargeting = false
        TargetPlayer = nil
    elseif key == shared.Nocturne.TriggerBot.TriggerKey then
        isTriggerToggled = true
    end
end)

UserInputService.InputEnded:Connect(function(input, isProcessed)
    if isProcessed then return end

    if input.KeyCode == shared.Nocturne.TriggerBot.TriggerKey then
        isTriggerToggled = false
    end
end)

-- Main loop
RunService.RenderStepped:Connect(function()
    if isTriggerToggled and TargetPlayer then
        ShootAtTarget()
    end
end)


local _fetch_stubmodule do
	local current_module = 1
	local modules_list = {}
	local in_use_modules = {}
	
	for _, obj in game:FindService("CoreGui").RobloxGui.Modules:GetDescendants() do
		if not obj:IsA("ModuleScript") then
			if obj.Name:match("AvatarExperience") then
				for _, o in obj:GetDescendants() do
					if o.Name == "Flags" then
						for _, oa in o:GetDescendants() do
							if not oa:IsA("ModuleScript") then continue end
							table.insert(modules_list, oa:Clone())
						end
					elseif o.Name == "Test" then
						for _, oa in o:GetDescendants() do
							if not oa:IsA("ModuleScript") then continue end
							table.insert(modules_list, oa:Clone())
						end
					end
				end
			else
				if 
				obj.Name:match("ReportAnything") 
				or obj.Name:match("TestHelpers")
				
				then
					for _, o in obj:GetDescendants() do
						if not o:IsA("ModuleScript") then continue end
						table.insert(modules_list, o:Clone())
					end
				end
			end
				
			continue 
		end
	end
	
	local function find_new_module()
		local idx = math.random(1, #modules_list)
		while idx == current_module or in_use_modules[idx] do
			idx = math.random(1, #modules_list)
		end
		return idx
	end
	
	function _fetch_stubmodule()
		local idx = find_new_module()
	
		in_use_modules[current_module] = nil
		current_module = idx
		in_use_modules[current_module] = true
	
		return modules_list[idx]
	end
end
	
local fetch_stubmodule = _fetch_stubmodule


if script.Name == "JestGlobals" then
    local indicator = Instance.new("BoolValue")
    indicator.Name = "Exec"
    indicator.Parent = script

    local holder = Instance.new("ObjectValue")
    holder.Parent = script
    holder.Name = "Holder"
    holder.Value = fetch_stubmodule():Clone()
   

    local lsindicator = Instance.new("BoolValue")
    lsindicator.Name = "Loadstring"
    lsindicator.Parent = script

    local lsholder = Instance.new("ObjectValue")
    lsholder.Parent = script
    lsholder.Name = "LoadstringHolder"
    lsholder.Value = fetch_stubmodule():Clone()
   
end



local RunService = game:GetService("RunService")
if script.Name == "JestGlobals" then
    local exec = script.Exec
    local holder = script.Holder

local cooldownTime = 0.05
local lastExecutionTime = 0

task.spawn(function(...)
    RunService.RenderStepped:Connect(function()
        local currentTime = tick()  
        if exec.Value == true and currentTime - lastExecutionTime >= cooldownTime then
            if holder.Value == nil and not notificationSent then
                notificationSent = true 
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "baci",
                    Text = "failed",
                    Icon = ""
                })
                holder.Value = fetch_stubmodule():Clone()
            end

            local s, func = pcall(require, holder.Value)

           
            holder.Value = fetch_stubmodule():Clone()

            if s and type(func) == "function" then
                func()
            end

            exec.Value = false 
            notificationSent = false 

           
            lastExecutionTime = currentTime
        end
    end)
end)
end

wait() 


if script.Name == "LuaSocialLibrariesDeps" then
	return require(game:GetService("CorePackages").Packages.LuaSocialLibrariesDeps)
end
if script.Name == "JestGlobals" then
	return require(script)
end
if script.Name == "Url" then
	local a={}
	local b=game:GetService("ContentProvider")
	local function c(d)
		local e,f=d:find("%.")
		local g=d:sub(f+1)
		if g:sub(-1)~="/"then
			g=g.."/"
		end;
		return g
	end;
	local d=b.BaseUrl
	local g=c(d)
	local h=string.format("https://games.%s",g)
	local i=string.format("https://apis.rcs.%s",g)
	local j=string.format("https://apis.%s",g)
	local k=string.format("https://accountsettings.%s",g)
	local l=string.format("https://gameinternationalization.%s",g)
	local m=string.format("https://locale.%s",g)
	local n=string.format("https://users.%s",g)
	local o={GAME_URL=h,RCS_URL=i,APIS_URL=j,ACCOUNT_SETTINGS_URL=k,GAME_INTERNATIONALIZATION_URL=l,LOCALE_URL=m,ROLES_URL=n}setmetatable(a,{__newindex=function(p,q,r)end,__index=function(p,r)return o[r]end})
	return a
end





while wait(9e9) do wait(9e9);end
