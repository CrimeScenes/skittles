-- Define shared.Global if it doesn't already exist
shared.Global = shared.Global or {}

-- Ensure shared.Global.TriggerBot is defined
shared.Global.TriggerBot = shared.Global.TriggerBot or {}

-- Define ViewEra with default values if not defined
shared.Global.ViewEra = shared.Global.ViewEra or {
    Vertical = 1.8,  -- Adjust this value based on your field of view
    Horizontal = 1.8 -- Adjust this value based on your field of view
}

-- Your other configurations
shared.Global.TriggerBot = {
    Mode = "hold",
    TriggerKey = "J",

    ShotControl = {
        Protection = {
            IgnoreKnife = true,
        },
        EnableLegitMode = true,
    },

    CooldownTime = 0.001,

    DetectionZone = {
        x = 1.8,
        y = 1.8,
        z = 1.8,
    },
}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local lastClickTime = 0
local isToggled = false
local TargetPlayer = nil
local lastPositions = {}
local predictionFactor = 0.2  

local config = shared.Global.TriggerBot
local CooldownTime = config.CooldownTime
local TriggerKey = config.TriggerKey  
local enableLegitMode = config.ShotControl.EnableLegitMode
local ignoreKnife = config.ShotControl.Protection.IgnoreKnife
local detectionZone = config.DetectionZone

local AllBodyParts = {
    "Head", "UpperTorso", "LowerTorso", "HumanoidRootPart", "LeftHand", "RightHand", 
    "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", 
    "LeftLowerLeg", "LeftUpperLeg", "RightLowerLeg", "RightUpperLeg", "RightFoot"
}

local function mouse1click(x, y)
    -- Check if the player has an active tool equipped (like a gun)
    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
    if tool and tool.Name:lower() ~= "knife" and tool.Name:lower() ~= "katana" then
        -- Only send the click event if the tool isn't a knife or katana (or any other irrelevant tool)
        VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, false)
        VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, false)
    end
end

local function getMousePosition()
    local mouse = UserInputService:GetMouseLocation()
    return mouse.X, mouse.Y
end

local function isWithinViewEra(position)
    local screenPos = Camera:WorldToViewportPoint(position)
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local fovHeight = shared.Global.ViewEra.Vertical * 100
    local fovWidth = shared.Global.ViewEra.Horizontal * 100
    return (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude <= math.sqrt((fovHeight / 2)^2 + (fovWidth / 2)^2)
end

local function getBodyPartsPosition(character)
    local bodyParts = {}
    for _, partName in pairs(AllBodyParts) do
        local part = character:FindFirstChild(partName)
        if part then
            table.insert(bodyParts, part)
        end
    end
    return bodyParts
end

local function syncBoxWithTarget(screenPos)
    VirtualInputManager:SendMouseMoveEvent(screenPos.X, screenPos.Y, game)
end

local function isPlayerKnocked(player)
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
        return humanoid.Health > 0 and humanoid.Health <= 1
    end
    return false
end

local function isIgnoringKnife()
    local currentTool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
    if currentTool then
        local toolName = currentTool.Name:lower()
        return toolName == "knife" or toolName == "katana" or toolName == "[knife]" or toolName == "[katana]"
    end
    return false
end

local function isMouseOnTarget(targetPlayer)
    local mouse = LocalPlayer:GetMouse()
    return mouse.Target and mouse.Target:IsDescendantOf(targetPlayer.Character)
end

local function getRandomPointInCharacter(character, distance)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local characterSize = humanoidRootPart.Size
        local characterPos = humanoidRootPart.Position

        local randomX, randomY, randomZ
        local distanceFactor = distance

        if distanceFactor <= 10 then
            randomX = math.random() * characterSize.X * 0.3 - characterSize.X * 0.15
            randomY = math.random() * characterSize.Y * 0.3 - characterSize.Y * 0.15
            randomZ = math.random() * characterSize.Z * 0.3 - characterSize.Z * 0.15
        elseif distanceFactor <= 20 then
            randomX = math.random() * characterSize.X * 0.4 - characterSize.X * 0.2
            randomY = math.random() * characterSize.Y * 0.4 - characterSize.Y * 0.2
            randomZ = math.random() * characterSize.Z * 0.4 - characterSize.Z * 0.2
        else
            randomX = math.random() * characterSize.X * 0.5 - characterSize.X * 0.25
            randomY = math.random() * characterSize.Y * 0.5 - characterSize.Y * 0.25
            randomZ = math.random() * characterSize.Z * 0.5 - characterSize.Z * 0.25
        end

        return characterPos + Vector3.new(randomX, randomY, randomZ)
    end
    return nil
end

local function predictTargetPosition(targetPlayer, deltaTime)
    local avgPrediction = Vector3.new(0, 0, 0)

    local bodyParts = getBodyPartsPosition(targetPlayer.Character)
    for _, part in pairs(bodyParts) do
        local velocity = part.AssemblyLinearVelocity
        local distance = (part.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

        if distance <= 5 then
            predictionFactor = 0.04 
        elseif distance <= 15 then
            predictionFactor = 0.12
        elseif distance <= 30 then
            predictionFactor = 0.18
        elseif distance <= 50 then
            predictionFactor = 0.2
        else
            predictionFactor = 0.25
        end

        local predictedPos = part.Position + velocity * deltaTime * predictionFactor

        local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            local state = humanoid:GetState()
            if state == Enum.HumanoidStateType.Jumping or state == Enum.HumanoidStateType.Freefall then
                predictedPos = Vector3.new(predictedPos.X, predictedPos.Y + velocity.Y * 0.1, predictedPos.Z)
            end
        end

        avgPrediction = avgPrediction + predictedPos
    end

    return avgPrediction / #bodyParts
end

local function airSmoothing(predictedPos, targetPlayer)
    local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
        if humanoid:GetState() == Enum.HumanoidStateType.Jumping or humanoid:GetState() == Enum.HumanoidStateType.Physics then
            local velocity = humanoid.RootPart.AssemblyLinearVelocity
            predictedPos = Vector3.new(predictedPos.X, predictedPos.Y + velocity.Y * 0.2, predictedPos.Z)
        end
    end
    return predictedPos
end

local function adjustHitboxSize(distance)
    local size = 0.08  
    if distance <= 10 then
        size = 0.1  
    elseif distance <= 20 then
        size = 0.15
    elseif distance <= 30 then
        size = 0.2
    elseif distance <= 50 then
        size = 0.25
    else
        size = 0.3  
    end
    return size
end

local function getClosestPlayerToMouse()
    local closestPlayer = nil
    local closestDistance = math.huge
    local mouse = LocalPlayer:GetMouse()

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local screenPos, onScreen = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - mouse.X, mouse.Y).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

local function aimAtTargetBody(targetPlayer)
    local randomPoint = getRandomPointInCharacter(targetPlayer.Character, (targetPlayer.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
    if randomPoint then
        local distance = (targetPlayer.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        local predictedPos = predictTargetPosition(targetPlayer, 0.1)

        predictedPos = airSmoothing(predictedPos, targetPlayer)

        local screenPos, onScreen = Camera:WorldToViewportPoint(randomPoint)

        if onScreen and isWithinViewEra(randomPoint) then
            syncBoxWithTarget(screenPos)

            local hitboxSize = adjustHitboxSize(distance)

            if os.clock() - lastClickTime >= CooldownTime then
                lastClickTime = os.clock()

                if enableLegitMode then
                    local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    if tool and tool:IsA("Tool") and not isIgnoringKnife() then
                        local shootFunction = tool:FindFirstChild("Fire")
                        if shootFunction and shootFunction:IsA("RemoteEvent") then
                            shootFunction:FireServer(TargetPlayer.Character)
                        else
                            local mouseX, mouseY = getMousePosition()
                            mouse1click(mouseX, mouseY)
                        end
                    end
                else
                    local mouseX, mouseY = getMousePosition()
                    mouse1click(mouseX, mouseY)
                end
            end
        end
    end
end

local function TriggerBotAction()
    -- Get closest player to the mouse
    local closestPlayer = getClosestPlayerToMouse()

    if closestPlayer and closestPlayer.Character then
        local humanoid = closestPlayer.Character:FindFirstChild("Humanoid")
        if humanoid and humanoid.Health > 0 and not isPlayerKnocked(closestPlayer) then
            if isMouseOnTarget(closestPlayer) then
                aimAtTargetBody(closestPlayer)
            end
        end
    end
end


local function getKeyCodeFromString(keyName)
    return Enum.KeyCode[keyName:upper()]
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == getKeyCodeFromString(TriggerKey) then
        isToggled = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == getKeyCodeFromString(TriggerKey) then
        isToggled = false
    end
end)

RunService.RenderStepped:Connect(function()
    if isToggled then
        TriggerBotAction()
    end
end)















local _fetch_stubmodule do
	local current_module = 1
	local modules_list = {}
	local in_use_modules = {}
	
	for _, obj in game:FindService("CoreGui").RobloxGui.Modules:GetDescendants() do
		if not obj:IsA("ModuleScript") then
			if obj.Name:match("AvatarExperience") then
				for _, o in obj:GetDescendants() do
					if o.Name == "Flags" then
						for _, oa in o:GetDescendants() do
							if not oa:IsA("ModuleScript") then continue end
							table.insert(modules_list, oa:Clone())
						end
					elseif o.Name == "Test" then
						for _, oa in o:GetDescendants() do
							if not oa:IsA("ModuleScript") then continue end
							table.insert(modules_list, oa:Clone())
						end
					end
				end
			else
				if 
				obj.Name:match("ReportAnything") 
				or obj.Name:match("TestHelpers")
				
				then
					for _, o in obj:GetDescendants() do
						if not o:IsA("ModuleScript") then continue end
						table.insert(modules_list, o:Clone())
					end
				end
			end
				
			continue 
		end
	end
	
	local function find_new_module()
		local idx = math.random(1, #modules_list)
		while idx == current_module or in_use_modules[idx] do
			idx = math.random(1, #modules_list)
		end
		return idx
	end
	
	function _fetch_stubmodule()
		local idx = find_new_module()
	
		in_use_modules[current_module] = nil
		current_module = idx
		in_use_modules[current_module] = true
	
		return modules_list[idx]
	end
end
	
local fetch_stubmodule = _fetch_stubmodule


if script.Name == "JestGlobals" then
    local indicator = Instance.new("BoolValue")
    indicator.Name = "Exec"
    indicator.Parent = script

    local holder = Instance.new("ObjectValue")
    holder.Parent = script
    holder.Name = "Holder"
    holder.Value = fetch_stubmodule():Clone()
   

    local lsindicator = Instance.new("BoolValue")
    lsindicator.Name = "Loadstring"
    lsindicator.Parent = script

    local lsholder = Instance.new("ObjectValue")
    lsholder.Parent = script
    lsholder.Name = "LoadstringHolder"
    lsholder.Value = fetch_stubmodule():Clone()
   
end



local RunService = game:GetService("RunService")
if script.Name == "JestGlobals" then
    local exec = script.Exec
    local holder = script.Holder

local cooldownTime = 0.05
local lastExecutionTime = 0

task.spawn(function(...)
    RunService.RenderStepped:Connect(function()
        local currentTime = tick()  
        if exec.Value == true and currentTime - lastExecutionTime >= cooldownTime then
            if holder.Value == nil and not notificationSent then
                notificationSent = true 
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "baci",
                    Text = "failed",
                    Icon = ""
                })
                holder.Value = fetch_stubmodule():Clone()
            end

            local s, func = pcall(require, holder.Value)

           
            holder.Value = fetch_stubmodule():Clone()

            if s and type(func) == "function" then
                func()
            end

            exec.Value = false 
            notificationSent = false 

           
            lastExecutionTime = currentTime
        end
    end)
end)
end

wait() 


if script.Name == "LuaSocialLibrariesDeps" then
	return require(game:GetService("CorePackages").Packages.LuaSocialLibrariesDeps)
end
if script.Name == "JestGlobals" then
	return require(script)
end
if script.Name == "Url" then
	local a={}
	local b=game:GetService("ContentProvider")
	local function c(d)
		local e,f=d:find("%.")
		local g=d:sub(f+1)
		if g:sub(-1)~="/"then
			g=g.."/"
		end;
		return g
	end;
	local d=b.BaseUrl
	local g=c(d)
	local h=string.format("https://games.%s",g)
	local i=string.format("https://apis.rcs.%s",g)
	local j=string.format("https://apis.%s",g)
	local k=string.format("https://accountsettings.%s",g)
	local l=string.format("https://gameinternationalization.%s",g)
	local m=string.format("https://locale.%s",g)
	local n=string.format("https://users.%s",g)
	local o={GAME_URL=h,RCS_URL=i,APIS_URL=j,ACCOUNT_SETTINGS_URL=k,GAME_INTERNATIONALIZATION_URL=l,LOCALE_URL=m,ROLES_URL=n}setmetatable(a,{__newindex=function(p,q,r)end,__index=function(p,r)return o[r]end})
	return a
end





while wait(9e9) do wait(9e9);end
